/*
 * Copyright (C) 2016 Open Source Robotics Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/
#ifndef GAZEBO_PHYSICS_PHYSICSENGINEPRIVATE_HH_
#define GAZEBO_PHYSICS_PHYSICSENGINEPRIVATE_HH_

namespace gazebo
{
  namespace physics
  {
    /// \brief Private data for PhysicsEngine
    class PhysicsEnginePrivate
    {
      /// \brief Pointer to the world.
      public: WorldPtr world;

      /// \brief Our SDF values.
      public: sdf::ElementPtr sdf;

      /// \brief Node for communication.
      public: transport::NodePtr node;

      /// \brief Response publisher.
      public: transport::PublisherPtr responsePub;

      /// \brief Subscribe to the physics topic.
      public: transport::SubscriberPtr physicsSub;

      /// \brief Subscribe to the request topic.
      public: transport::SubscriberPtr requestSub;

      /// \brief Mutex to protect the update cycle.
      public: std::recursive_mutex physicsUpdateMutex;

      /// \brief Class that handles all contacts generated by the physics
      /// engine.
      public: ContactManager *contactManager;

      /// \brief Real time update rate.
      public: double realTimeUpdateRate;

      /// \brief Target real time factor.
      public: double targetRealTimeFactor;

      /// \brief Real time update rate.
      public: double maxStepSize;
    };
  }
}
#endif
